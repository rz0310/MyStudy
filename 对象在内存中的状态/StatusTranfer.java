package 对象在内存中的状态;
/*
 * 垃圾回收机制的特征：
 * （1）垃圾回收机制只负责回收堆内存中的对象，不会回收任何物理资源（例如：数据库连接、网络I/o等资源）
 * （2）程序无法控制垃圾回收的运行，垃圾回收会在合适的时候进行。当对象永久性的失去引用后，系统就会在合适的时候回收他所占用的内存。
 * （3）在垃圾回收机制回收任何对象之前，总会先调用他的finalize方法，该方法可能使该对象重新复活（让一个引用变量重新引用该对象），
 * 从而导致垃圾回收机制取消回收。
 * 
 * 对象在内存中的三个状态：
 * （1）可达状态：当一个对象被创建后，若有一个以上的引用变量引用他，则这个对象在程序中处于可达状态，程序可通过引用变量来调用该对象的实例变量和方法。
 * （2）可恢复状态：如果程序中不再有某个引用变量引用他，就进入了可恢复状态。在这种状态下，系统的垃圾回收机制准备回收该对象所占用的内存，在回收该对象之前，
 * 系统会调用所有可恢复对象的finalize()方法进行资源清理，如果系统在调用finalize()方法时，重新让一个引用变量引用该对象，则这个对象会再次变为
 * 可达状态；否则进入不可达状态。
 * （3）不可达状态：当对象与所有引用变量的关联都被切断，且系统已经调用所有对象的finalize()方法后，依然没有使该对象变成可达状态，
 * 这个对象就会永久性的失去引用，最后变成不可达状态。
 * 只有当一个对象处于不可达状态时，系统才会回收该对象所占有的资源。
 * 
 * 一个对象可以被一个方法的局部变量引用，也可以被其他类的类变量引用，或被其它对象的实例变量引用。
 * 当某个对象被其他类的类变量引用时，只有该类被销毁后，该对象才会进入可恢复状态；
 * 当某个对象被其他对象的实例变量引用时，只有当该对象被销毁后，该对象才会进入可恢复状态。
 */
public class StatusTranfer {
	public static void test() {
		String a = new String("轻量级JavaEE企业应用实战");
		a = new String("疯狂java讲义");
		System.out.println(a);
	}
	public static void main(String[] args) {
		test();
	}
}
